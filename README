# Minimal Webserver in Assembly (x86-64)
This project is a learning exercise to understand how webservers work
The source and inspiration come from:
- https://pwn.college/ 
- https://youtu.be/MpsDNv-I8i0?si=UBZxxZSMCHWHr5c8

Tools I use:
- gcc as a compiler and a linker 

compiler: transforms x86-64 assembly (".s" files) into machine code (".o" object files)  
linker: transforms ".o" files into an ELF binary (Executable and Linkable Format), which can be run by the Linux kernel 

how I compiled: gcc -nostdlib -no-pie -o webserver webserver.s 

What is a webserver? 
A webserver is a Software for servers to process HTTP(S) requests.

A webserver contains:
- socket:
	Creates a communication endpoint between programs (client/server) to send and receive data.
	In C the syntax is "int socket(int domain, int type, int protocol);".
	domain = to determine if IPv4 or IPv6
	type = how to transport the data (SOCK_STREAM = TCP; SOCK_DGRAM = UDP)
	protocole = determine which transport protocole
- bind:
	Connects IP adresse with a port.
	In C the syntax is " int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);".
	sockfd = socket file descriptor (determine condition from file for the kernel) -> return value from socket-syscall
	sockaddr = adress to bind the socket
	addrlen = lenght of adress in bytes
- listen:
- accept:
- read:
- write:
- close:

Somethink about Assembly (x86-64):
- register seqeunece: rax / rdi / rsi / rdx / r10 / r9 ...
- rax-register for syscall-numbers (I found them at my laptop here: /usr/include/x86_64-linux-gnu/asm/unistd_64.h)
- register r12 - r15 used as tmp variables 

